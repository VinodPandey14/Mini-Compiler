
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BREAK CASE COLON COMMA DEFAULT DIVIDE ELSE EQ EQUALS FLOAT FOR GE GT IF LBRACE LE LPAREN LT MINUS NAME NE NUMBER PLUS RBRACE RPAREN SEMICOLON SWITCH TIMES TYPE WHILEprogram : statement_liststatement_list : statement_list statement\n| statementstatement : assignment SEMICOLON\n| if_statement\n| while_statement\n| for_statement\n| switch_statement\n| BREAK SEMICOLON\n| block\n| declarationdeclaration : TYPE NAME SEMICOLONblock : LBRACE statement_list RBRACEassignment : NAME EQUALS expressionif_statement : IF LPAREN expression RPAREN statement ELSE statementwhile_statement : WHILE LPAREN expression RPAREN statementfor_statement : FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statementswitch_statement : SWITCH LPAREN expression RPAREN LBRACE case_list RBRACEcase_list : case_list case\n| casecase : CASE expression COLON statement_list\n| DEFAULT COLON statement_listexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression EQ expression\n| expression NE expression\n| expression LT expression\n| expression GT expression\n| expression LE expression\n| expression GE expressionexpression : LPAREN expression RPARENexpression : NUMBER\n| FLOATexpression : NAMEexpression : NAME LPAREN argument_list RPARENargument_list : argument_list COMMA expression\n| expression\n| emptyempty :'
    
_lr_action_items = {'BREAK':([0,2,3,5,6,7,8,10,11,17,19,20,21,27,38,39,52,53,71,76,83,85,88,89,90,91,92,93,],[9,9,-3,-5,-6,-7,-8,-10,-11,9,-2,-4,-9,9,-13,-12,9,9,-16,9,-15,-18,9,9,9,9,-17,9,]),'NAME':([0,2,3,5,6,7,8,10,11,17,18,19,20,21,22,23,24,25,26,27,31,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,71,75,76,77,80,83,85,88,89,90,91,92,93,],[12,12,-3,-5,-6,-7,-8,-10,-11,12,28,-2,-4,-9,29,29,29,12,29,12,29,-13,-12,29,29,29,29,29,29,29,29,29,29,29,12,12,29,-16,29,12,12,29,-15,-18,12,12,12,12,-17,12,]),'IF':([0,2,3,5,6,7,8,10,11,17,19,20,21,27,38,39,52,53,71,76,83,85,88,89,90,91,92,93,],[13,13,-3,-5,-6,-7,-8,-10,-11,13,-2,-4,-9,13,-13,-12,13,13,-16,13,-15,-18,13,13,13,13,-17,13,]),'WHILE':([0,2,3,5,6,7,8,10,11,17,19,20,21,27,38,39,52,53,71,76,83,85,88,89,90,91,92,93,],[14,14,-3,-5,-6,-7,-8,-10,-11,14,-2,-4,-9,14,-13,-12,14,14,-16,14,-15,-18,14,14,14,14,-17,14,]),'FOR':([0,2,3,5,6,7,8,10,11,17,19,20,21,27,38,39,52,53,71,76,83,85,88,89,90,91,92,93,],[15,15,-3,-5,-6,-7,-8,-10,-11,15,-2,-4,-9,15,-13,-12,15,15,-16,15,-15,-18,15,15,15,15,-17,15,]),'SWITCH':([0,2,3,5,6,7,8,10,11,17,19,20,21,27,38,39,52,53,71,76,83,85,88,89,90,91,92,93,],[16,16,-3,-5,-6,-7,-8,-10,-11,16,-2,-4,-9,16,-13,-12,16,16,-16,16,-15,-18,16,16,16,16,-17,16,]),'LBRACE':([0,2,3,5,6,7,8,10,11,17,19,20,21,27,38,39,52,53,55,71,76,83,85,88,89,90,91,92,93,],[17,17,-3,-5,-6,-7,-8,-10,-11,17,-2,-4,-9,17,-13,-12,17,17,73,-16,17,-15,-18,17,17,17,17,-17,17,]),'TYPE':([0,2,3,5,6,7,8,10,11,17,19,20,21,27,38,39,52,53,71,76,83,85,88,89,90,91,92,93,],[18,18,-3,-5,-6,-7,-8,-10,-11,18,-2,-4,-9,18,-13,-12,18,18,-16,18,-15,-18,18,18,18,18,-17,18,]),'$end':([1,2,3,5,6,7,8,10,11,19,20,21,38,39,71,83,85,92,],[0,-1,-3,-5,-6,-7,-8,-10,-11,-2,-4,-9,-13,-12,-16,-15,-18,-17,]),'RBRACE':([3,5,6,7,8,10,11,19,20,21,27,38,39,71,78,79,83,85,86,91,92,93,],[-3,-5,-6,-7,-8,-10,-11,-2,-4,-9,38,-13,-12,-16,85,-20,-15,-18,-19,-22,-17,-21,]),'CASE':([3,5,6,7,8,10,11,19,20,21,38,39,71,73,78,79,83,85,86,91,92,93,],[-3,-5,-6,-7,-8,-10,-11,-2,-4,-9,-13,-12,-16,80,80,-20,-15,-18,-19,-22,-17,-21,]),'DEFAULT':([3,5,6,7,8,10,11,19,20,21,38,39,71,73,78,79,83,85,86,91,92,93,],[-3,-5,-6,-7,-8,-10,-11,-2,-4,-9,-13,-12,-16,81,81,-20,-15,-18,-19,-22,-17,-21,]),'SEMICOLON':([4,9,28,29,30,32,33,36,59,60,61,62,63,64,65,66,67,68,69,72,74,],[20,21,39,-36,-14,-34,-35,54,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,77,-37,]),'ELSE':([5,6,7,8,10,11,20,21,38,39,70,71,83,85,92,],[-5,-6,-7,-8,-10,-11,-4,-9,-13,-12,76,-16,-15,-18,-17,]),'EQUALS':([12,],[22,]),'LPAREN':([13,14,15,16,22,23,24,26,29,31,40,41,42,43,44,45,46,47,48,49,50,54,75,80,],[23,24,25,26,31,31,31,31,40,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NUMBER':([22,23,24,26,31,40,41,42,43,44,45,46,47,48,49,50,54,75,80,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'FLOAT':([22,23,24,26,31,40,41,42,43,44,45,46,47,48,49,50,54,75,80,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'PLUS':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,41,-34,-35,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-33,41,-37,41,41,]),'MINUS':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,42,-34,-35,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-33,42,-37,42,42,]),'TIMES':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,43,-34,-35,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-33,43,-37,43,43,]),'DIVIDE':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,44,-34,-35,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-33,44,-37,44,44,]),'EQ':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,45,-34,-35,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-33,45,-37,45,45,]),'NE':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,46,-34,-35,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-33,46,-37,46,46,]),'LT':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,47,-34,-35,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-33,47,-37,47,47,]),'GT':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,48,-34,-35,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-33,48,-37,48,48,]),'LE':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,49,-34,-35,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-33,49,-37,49,49,]),'GE':([29,30,32,33,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,69,72,74,82,87,],[-36,50,-34,-35,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-33,50,-37,50,50,]),'RPAREN':([29,30,32,33,34,35,37,40,51,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,82,84,],[-36,-14,-34,-35,52,53,55,-41,69,74,-39,-40,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-37,-38,89,]),'COMMA':([29,32,33,40,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,82,],[-36,-34,-35,-41,75,-39,-40,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-37,-38,]),'COLON':([29,32,33,59,60,61,62,63,64,65,66,67,68,69,74,81,87,],[-36,-34,-35,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-37,88,90,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,17,88,90,],[2,27,91,93,]),'statement':([0,2,17,27,52,53,76,88,89,90,91,93,],[3,19,3,19,70,71,83,3,92,3,19,19,]),'assignment':([0,2,17,25,27,52,53,76,77,88,89,90,91,93,],[4,4,4,36,4,4,4,4,84,4,4,4,4,4,]),'if_statement':([0,2,17,27,52,53,76,88,89,90,91,93,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'while_statement':([0,2,17,27,52,53,76,88,89,90,91,93,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'for_statement':([0,2,17,27,52,53,76,88,89,90,91,93,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'switch_statement':([0,2,17,27,52,53,76,88,89,90,91,93,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'block':([0,2,17,27,52,53,76,88,89,90,91,93,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'declaration':([0,2,17,27,52,53,76,88,89,90,91,93,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'expression':([22,23,24,26,31,40,41,42,43,44,45,46,47,48,49,50,54,75,80,],[30,34,35,37,51,57,59,60,61,62,63,64,65,66,67,68,72,82,87,]),'argument_list':([40,],[56,]),'empty':([40,],[58,]),'case_list':([73,],[78,]),'case':([73,78,],[79,86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',11),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',15),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',16),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','parser.py',23),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',24),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',26),
  ('statement -> switch_statement','statement',1,'p_statement','parser.py',27),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement','parser.py',28),
  ('statement -> block','statement',1,'p_statement','parser.py',29),
  ('statement -> declaration','statement',1,'p_statement','parser.py',30),
  ('declaration -> TYPE NAME SEMICOLON','declaration',3,'p_declaration','parser.py',37),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',41),
  ('assignment -> NAME EQUALS expression','assignment',3,'p_assignment','parser.py',45),
  ('if_statement -> IF LPAREN expression RPAREN statement ELSE statement','if_statement',7,'p_if_statement','parser.py',49),
  ('while_statement -> WHILE LPAREN expression RPAREN statement','while_statement',5,'p_while_statement','parser.py',53),
  ('for_statement -> FOR LPAREN assignment SEMICOLON expression SEMICOLON assignment RPAREN statement','for_statement',9,'p_for_statement','parser.py',57),
  ('switch_statement -> SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE','switch_statement',7,'p_switch_statement','parser.py',65),
  ('case_list -> case_list case','case_list',2,'p_case_list','parser.py',69),
  ('case_list -> case','case_list',1,'p_case_list','parser.py',70),
  ('case -> CASE expression COLON statement_list','case',4,'p_case','parser.py',77),
  ('case -> DEFAULT COLON statement_list','case',3,'p_case','parser.py',78),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',85),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',86),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',87),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',88),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',89),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',90),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',91),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',92),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',93),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',94),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',98),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',102),
  ('expression -> FLOAT','expression',1,'p_expression_number','parser.py',103),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',107),
  ('expression -> NAME LPAREN argument_list RPAREN','expression',4,'p_expression_function_call','parser.py',111),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','parser.py',115),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',116),
  ('argument_list -> empty','argument_list',1,'p_argument_list','parser.py',117),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',126),
]
